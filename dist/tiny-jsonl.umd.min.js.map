{"version":3,"file":"tiny-jsonl.umd.min.js","sources":["../src/constants.js","../src/rewrite.js","../src/jsonl.js"],"sourcesContent":["export const STRING_MARK = \"$\";\nexport const STRING_NEW_LINE = \"\\n\";\nexport const STRING_OBJECT = \"object\";\nexport const STRING_REPLACEMENT = \"$1 \";\nexport const STRING_STRING = \"string\";\nexport const MSG_INVALID_INPUT = \"Argument must be an Array or Object\";\nexport const MSG_INDEX = `<IDX_${STRING_MARK}>`;\n","/**\n * Rewrite a string to be used in swaps\n * @param arg\n * @returns {string}\n */\nexport function rewrite (arg) {\n\treturn `\"${arg.replace(/\"/g, \"\\\\\\\"\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\")}\"`;\n}\n","import {\n\tMSG_INDEX,\n\tMSG_INVALID_INPUT,\n\tSTRING_MARK,\n\tSTRING_NEW_LINE,\n\tSTRING_OBJECT,\n\tSTRING_REPLACEMENT,\n\tSTRING_STRING\n} from \"./constants.js\";\nimport {rewrite} from \"./rewrite.js\";\nimport {strings} from \"tiny-strings\";\n\n/**\n * Converts a JSONL string to an Array of Objects\n * @param arg\n * @returns {any}\n */\nexport function parse (arg) {\n\tif (typeof arg !== STRING_STRING) {\n\t\tthrow new TypeError(MSG_INVALID_INPUT);\n\t}\n\n\tconst result = JSON.parse(`[${arg.trim().split(/(?<=})\\n/).join(\",\")}]`);\n\n\treturn result.length > 1 ? result : result[0];\n}\n\n/**\n * Converts an Object or Array of Objects to JSONL string\n * @param arg\n * @returns {string}\n */\nexport function stringify (arg) {\n\tif (typeof arg !== STRING_OBJECT) {\n\t\tthrow new TypeError(MSG_INVALID_INPUT);\n\t}\n\n\tlet result;\n\n\tif (Array.isArray(arg)) {\n\t\tresult = arg.map(i => stringify(i)).join(STRING_NEW_LINE);\n\t} else {\n\t\tlet tmp = JSON.stringify(arg, null, 0);\n\t\tconst extracted = strings(arg, true).map(rewrite);\n\n\t\tfor (const [idx, val] of extracted.entries()) {\n\t\t\ttmp = tmp.replace(val, MSG_INDEX.replace(STRING_MARK, idx));\n\t\t}\n\n\t\tresult = tmp.replace(/(:|,)/g, STRING_REPLACEMENT);\n\n\t\tfor (const [idx, val] of extracted.entries()) {\n\t\t\tresult = result.replace(MSG_INDEX.replace(STRING_MARK, idx.toString()), val);\n\t\t}\n\t}\n\n\treturn result;\n}\n"],"names":["MSG_INVALID_INPUT","MSG_INDEX","rewrite","arg","replace","exports","parse","TypeError","result","JSON","trim","split","join","length","stringify","Array","isArray","map","i","tmp","extracted","strings","idx","val","entries","toString"],"mappings":";;;;oSAAO,MAKMA,EAAoB,sCACpBC,EAAY,UCDlB,SAASC,EAASC,GACxB,MAAO,IAAIA,EAAIC,QAAQ,KAAM,OAAQA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,SACjG,CCkDAC,EAAAC,MAxCO,SAAgBH,GACtB,GFd4B,iBEcjBA,EACV,MAAM,IAAII,UAAUP,GAGrB,MAAMQ,EAASC,KAAKH,MAAM,IAAIH,EAAIO,OAAOC,MAAM,YAAYC,KAAK,SAEhE,OAAOJ,EAAOK,OAAS,EAAIL,EAASA,EAAO,EAC5C,EAgCAH,EAAAS,UAzBO,SAASA,EAAWX,GAC1B,GF/B4B,iBE+BjBA,EACV,MAAM,IAAII,UAAUP,GAGrB,IAAIQ,EAEJ,GAAIO,MAAMC,QAAQb,GACjBK,EAASL,EAAIc,KAAIC,GAAKJ,EAAUI,KAAIN,KFvCP,UEwCvB,CACN,IAAIO,EAAMV,KAAKK,UAAUX,EAAK,KAAM,GACpC,MAAMiB,EAAYC,EAAAA,QAAQlB,GAAK,GAAMc,IAAIf,GAEzC,IAAK,MAAOoB,EAAKC,KAAQH,EAAUI,UAClCL,EAAMA,EAAIf,QAAQmB,EAAKtB,EAAUG,QF9CT,IE8C8BkB,IAGvDd,EAASW,EAAIf,QAAQ,SF9CW,OEgDhC,IAAK,MAAOkB,EAAKC,KAAQH,EAAUI,UAClChB,EAASA,EAAOJ,QAAQH,EAAUG,QFpDV,IEoD+BkB,EAAIG,YAAaF,EAEzE,CAED,OAAOf,CACR,CAAA"}