{"version":3,"file":"tiny-jsonl.min.js","sources":["../src/constants.js","../src/rewrite.js","../src/crawl.js","../src/jsonl.js"],"sourcesContent":["export const STRING_EMPTY = \"\";\r\nexport const STRING_NEW_LINE = \"\\n\";\r\nexport const STRING_REPLACEMENT = \"$1 \";\r\nexport const STRING_STRING = \"string\";\r\nexport const STRING_OBJECT = \"object\";\r\nexport const MSG_INVALID_INPUT = \"Argument must be an Array or Object\";","export function rewrite (arg = \"\") {\r\n\treturn arg.replace(/\"/g, \"\\\\\\\"\");\r\n}","import {STRING_OBJECT, STRING_STRING} from \"./constants.js\";\r\nimport {rewrite} from \"./rewrite.js\";\r\n\r\nexport function crawl (arg = {}, strings = []) {\r\n\tconst keys = Object.keys(arg);\r\n\tstrings.push(...keys);\r\n\tfor (const key of strings) {\r\n\t\tif (typeof arg[key] === STRING_STRING) {\r\n\t\t\tstrings.push(rewrite(arg[key]));\r\n\t\t} else if (Array.isArray(arg[key])) {\r\n\t\t\tfor (const value of arg[key]) {\r\n\t\t\t\tif (typeof value === STRING_OBJECT) {\r\n\t\t\t\t\tcrawl(value, strings);\r\n\t\t\t\t} else if (typeof value === STRING_STRING) {\r\n\t\t\t\t\tstrings.push(rewrite(value));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (typeof arg[key] === STRING_OBJECT) {\r\n\t\t\tcrawl(arg[key], strings);\r\n\t\t}\r\n\t}\r\n}","import {MSG_INVALID_INPUT, STRING_NEW_LINE, STRING_OBJECT, STRING_REPLACEMENT} from \"./constants.js\";\r\nimport {crawl} from \"./crawl.js\";\r\n\r\nexport function jsonl (arg) {\r\n\tif (typeof arg !== STRING_OBJECT) {\r\n\t\tthrow new TypeError(MSG_INVALID_INPUT);\r\n\t}\r\n\r\n\tlet result;\r\n\r\n\tif (Array.isArray(arg)) {\r\n\t\tresult = arg.map(i => jsonl(i)).join(STRING_NEW_LINE);\r\n\t} else {\r\n\t\tlet tmp = JSON.stringify(arg, null, 0);\r\n\t\tconst strings = [];\r\n\r\n\t\tcrawl(arg, strings);\r\n\r\n\t\tfor (const [idx, val] of strings.entries()) {\r\n\t\t\ttmp = tmp.replace(`\"${val}\"`, `INDEX_${idx}`);\r\n\t\t}\r\n\r\n\t\tresult = tmp.replace(/(:|,)/g, STRING_REPLACEMENT);\r\n\r\n\t\tfor (const [idx, val] of strings.entries()) {\r\n\t\t\tresult = result.replace(`INDEX_${idx}`, `\"${val}\"`);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}"],"names":["STRING_STRING","STRING_OBJECT","rewrite","arg","replace","crawl","strings","keys","Object","push","key","Array","isArray","value","jsonl","TypeError","result","map","i","join","tmp","JSON","stringify","idx","val","entries"],"mappings":";;;;AACO,MAEMA,EAAgB,SAChBC,EAAgB,SCJtB,SAASC,EAASC,EAAM,IAC9B,OAAOA,EAAIC,QAAQ,KAAM,MAC1B,CCCO,SAASC,EAAOF,EAAM,GAAIG,EAAU,IAC1C,MAAMC,EAAOC,OAAOD,KAAKJ,GACzBG,EAAQG,QAAQF,GAChB,IAAK,MAAMG,KAAOJ,EACjB,UAAWH,EAAIO,KAASV,EACvBM,EAAQG,KAAKP,EAAQC,EAAIO,UACnB,GAAIC,MAAMC,QAAQT,EAAIO,IAC5B,IAAK,MAAMG,KAASV,EAAIO,UACZG,IAAUZ,EACpBI,EAAMQ,EAAOP,UACIO,IAAUb,GAC3BM,EAAQG,KAAKP,EAAQW,gBAGNV,EAAIO,KAAST,GAC9BI,EAAMF,EAAIO,GAAMJ,EAGnB,CClBO,SAASQ,EAAOX,GACtB,UAAWA,IAAQF,EAClB,MAAM,IAAIc,UHAqB,uCGGhC,IAAIC,EAEJ,GAAIL,MAAMC,QAAQT,GACjBa,EAASb,EAAIc,KAAIC,GAAKJ,EAAMI,KAAIC,KHVH,UGWvB,CACN,IAAIC,EAAMC,KAAKC,UAAUnB,EAAK,KAAM,GACpC,MAAMG,EAAU,GAEhBD,EAAMF,EAAKG,GAEX,IAAK,MAAOiB,EAAKC,KAAQlB,EAAQmB,UAChCL,EAAMA,EAAIhB,QAAQ,IAAIoB,KAAQ,SAASD,KAGxCP,EAASI,EAAIhB,QAAQ,SHpBW,OGsBhC,IAAK,MAAOmB,EAAKC,KAAQlB,EAAQmB,UAChCT,EAASA,EAAOZ,QAAQ,SAASmB,IAAO,IAAIC,KAE7C,CAED,OAAOR,CACR,QAAAF"}