{"version":3,"file":"tiny-jsonl.min.js","sources":["../src/rewrite.js","../src/jsonl.js","../src/constants.js"],"sourcesContent":["export function rewrite (arg = \"\") {\r\n\treturn `\"${arg.replace(/\"/g, \"\\\\\\\"\")}\"`;\r\n}","import {MSG_INVALID_INPUT, STRING_NEW_LINE, STRING_OBJECT, STRING_REPLACEMENT} from \"./constants.js\";\r\nimport {rewrite} from \"./rewrite.js\";\r\nimport {strings} from \"tiny-strings\";\r\n\r\nexport function jsonl (arg) {\r\n\tif (typeof arg !== STRING_OBJECT) {\r\n\t\tthrow new TypeError(MSG_INVALID_INPUT);\r\n\t}\r\n\r\n\tlet result;\r\n\r\n\tif (Array.isArray(arg)) {\r\n\t\tresult = arg.map(i => jsonl(i)).join(STRING_NEW_LINE);\r\n\t} else {\r\n\t\tlet tmp = JSON.stringify(arg, null, 0);\r\n\t\tconst extracted = strings(arg, true).map(rewrite);\r\n\r\n\t\tfor (const [idx, val] of extracted.entries()) {\r\n\t\t\ttmp = tmp.replace(val, `INDEX_${idx}`);\r\n\t\t}\r\n\r\n\t\tresult = tmp.replace(/(:|,)/g, STRING_REPLACEMENT);\r\n\r\n\t\tfor (const [idx, val] of extracted.entries()) {\r\n\t\t\tresult = result.replace(`INDEX_${idx}`, val);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}","export const STRING_NEW_LINE = \"\\n\";\r\nexport const STRING_REPLACEMENT = \"$1 \";\r\nexport const STRING_OBJECT = \"object\";\r\nexport const MSG_INVALID_INPUT = \"Argument must be an Array or Object\";"],"names":["rewrite","arg","replace","jsonl","TypeError","result","Array","isArray","map","i","join","tmp","JSON","stringify","extracted","strings","idx","val","entries"],"mappings":";;;;uCAAO,SAASA,EAASC,EAAM,IAC9B,MAAO,IAAIA,EAAIC,QAAQ,KAAM,SAC9B,CCEO,SAASC,EAAOF,GACtB,GCH4B,iBDGjBA,EACV,MAAM,IAAIG,UCHqB,uCDMhC,IAAIC,EAEJ,GAAIC,MAAMC,QAAQN,GACjBI,EAASJ,EAAIO,KAAIC,GAAKN,EAAMM,KAAIC,KCZH,UDavB,CACN,IAAIC,EAAMC,KAAKC,UAAUZ,EAAK,KAAM,GACpC,MAAMa,EAAYC,EAAQd,GAAK,GAAMO,IAAIR,GAEzC,IAAK,MAAOgB,EAAKC,KAAQH,EAAUI,UAClCP,EAAMA,EAAIT,QAAQe,EAAK,SAASD,KAGjCX,EAASM,EAAIT,QAAQ,SCpBW,ODsBhC,IAAK,MAAOc,EAAKC,KAAQH,EAAUI,UAClCb,EAASA,EAAOH,QAAQ,SAASc,IAAOC,EAEzC,CAED,OAAOZ,CACR,QAAAF"}