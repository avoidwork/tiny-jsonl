{"version":3,"file":"tiny-jsonl.min.js","sources":["../src/constants.js","../src/rewrite.js","../src/valid.js","../src/jsonl.js","../src/cast.js"],"sourcesContent":["export const STRING_MARK = \"$\";\r\nexport const STRING_NEW_LINE = \"\\n\";\r\nexport const STRING_OBJECT = \"object\";\r\nexport const STRING_REPLACEMENT = \"$1 \";\r\nexport const STRING_STRING = \"string\";\r\nexport const MSG_INVALID_INPUT = \"Argument must be an Array or Object\";\r\nexport const MSG_INDEX = `<IDX_${STRING_MARK}>`;\r\n","/**\r\n * Rewrite a string to be used in swaps\r\n * @param arg\r\n * @returns {string}\r\n */\r\nexport function rewrite (arg) {\r\n\treturn `\"${arg.replace(/\"/g, \"\\\\\\\"\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\")}\"`;\r\n}\r\n","export function valid (arg) {\r\n\treturn typeof arg === \"object\" && arg !== null;\r\n}\r\n","import {\r\n\tMSG_INDEX,\r\n\tMSG_INVALID_INPUT,\r\n\tSTRING_MARK,\r\n\tSTRING_NEW_LINE,\r\n\tSTRING_REPLACEMENT,\r\n\tSTRING_STRING\r\n} from \"./constants.js\";\r\nimport {cast} from \"./cast.js\";\r\nimport {rewrite} from \"./rewrite.js\";\r\nimport {valid} from \"./valid.js\";\r\nimport {strings} from \"tiny-strings\";\r\n\r\n/**\r\n * Converts a JSONL string to an Array of Objects\r\n * @param arg\r\n * @returns {any}\r\n */\r\nexport function parse (arg) {\r\n\tif (typeof arg !== STRING_STRING) {\r\n\t\tthrow new TypeError(MSG_INVALID_INPUT);\r\n\t}\r\n\r\n\tconst result = JSON.parse(`[${arg.trim().split(/(?<=})\\n/).join(\",\")}]`);\r\n\r\n\treturn result.length > 1 ? result : result[0];\r\n}\r\n\r\n/**\r\n * Converts an Object or Array of Objects to JSONL string\r\n * @param arg\r\n * @returns {string}\r\n */\r\nexport function stringify (arg, edge = true) {\r\n\tif (valid(arg) === false) {\r\n\t\tthrow new TypeError(MSG_INVALID_INPUT);\r\n\t}\r\n\r\n\tlet result;\r\n\r\n\tif (Array.isArray(arg) && edge) {\r\n\t\tconst objects = arg.some(i => i instanceof Object);\r\n\r\n\t\tresult = arg.map(i => valid(i) ? stringify(i, false) : i);\r\n\t\tresult = objects ? result.join(STRING_NEW_LINE) : cast(result);\r\n\t} else {\r\n\t\tlet tmp = JSON.stringify(arg, null, 0);\r\n\t\tconst extracted = strings(arg, true).map(rewrite);\r\n\r\n\t\tfor (const [idx, val] of extracted.entries()) {\r\n\t\t\ttmp = tmp.replace(val, MSG_INDEX.replace(STRING_MARK, idx));\r\n\t\t}\r\n\r\n\t\tresult = tmp.replace(/(:|,)/g, STRING_REPLACEMENT);\r\n\r\n\t\tfor (const [idx, val] of extracted.entries()) {\r\n\t\t\tresult = result.replace(MSG_INDEX.replace(STRING_MARK, idx.toString()), val);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n","/**\r\n * Casts an array to a string\r\n * @param arg\r\n * @returns {string}\r\n */\r\nexport function cast (arg) {\r\n\tconst result = `[${arg.map(i => typeof i === \"string\" ? `\"${i}\"` : i === null ? \"null\" : i).join(\", \")}]`;\r\n\r\n\treturn result.replace(\", ]\", \"]\");\r\n}\r\n"],"names":["MSG_INVALID_INPUT","MSG_INDEX","rewrite","arg","replace","valid","parse","TypeError","result","JSON","trim","split","join","length","stringify","edge","Array","isArray","objects","some","i","Object","map","cast","tmp","extracted","strings","idx","val","entries","toString"],"mappings":";;;;uCAAO,MAKMA,EAAoB,sCACpBC,EAAY,UCDlB,SAASC,EAASC,GACxB,MAAO,IAAIA,EAAIC,QAAQ,KAAM,OAAQA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,SACjG,CCPO,SAASC,EAAOF,GACtB,MAAsB,iBAARA,GAA4B,OAARA,CACnC,CCgBO,SAASG,EAAOH,GACtB,GHf4B,iBGejBA,EACV,MAAM,IAAII,UAAUP,GAGrB,MAAMQ,EAASC,KAAKH,MAAM,IAAIH,EAAIO,OAAOC,MAAM,YAAYC,KAAK,SAEhE,OAAOJ,EAAOK,OAAS,EAAIL,EAASA,EAAO,EAC5C,CAOO,SAASM,EAAWX,EAAKY,GAAO,GACtC,IAAmB,IAAfV,EAAMF,GACT,MAAM,IAAII,UAAUP,GAGrB,IAAIQ,EAEJ,GAAIQ,MAAMC,QAAQd,IAAQY,EAAM,CAC/B,MAAMG,EAAUf,EAAIgB,MAAKC,GAAKA,aAAaC,SAE3Cb,EAASL,EAAImB,KAAIF,GAAKf,EAAMe,GAAKN,EAAUM,GAAG,GAASA,IACvDZ,EAASU,EAAUV,EAAOI,KH3CG,MIIxB,SAAeT,GAGrB,MAFe,IAAIA,EAAImB,KAAIF,GAAkB,iBAANA,EAAiB,IAAIA,KAAa,OAANA,EAAa,OAASA,IAAGR,KAAK,SAEnFR,QAAQ,MAAO,IAC9B,CDmCoDmB,CAAKf,EACzD,KAAQ,CACN,IAAIgB,EAAMf,KAAKK,UAAUX,EAAK,KAAM,GACpC,MAAMsB,EAAYC,EAAQvB,GAAK,GAAMmB,IAAIpB,GAEzC,IAAK,MAAOyB,EAAKC,KAAQH,EAAUI,UAClCL,EAAMA,EAAIpB,QAAQwB,EAAK3B,EAAUG,QHlDT,IGkD8BuB,IAGvDnB,EAASgB,EAAIpB,QAAQ,SHlDW,OGoDhC,IAAK,MAAOuB,EAAKC,KAAQH,EAAUI,UAClCrB,EAASA,EAAOJ,QAAQH,EAAUG,QHxDV,IGwD+BuB,EAAIG,YAAaF,EAEzE,CAED,OAAOpB,CACR,QAAAF,WAAAQ"}