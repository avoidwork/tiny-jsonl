{"version":3,"file":"tiny-jsonl.min.js","sources":["../src/constants.js","../src/parse.js","../src/rewrite.js","../src/stringify.js"],"sourcesContent":["export const STRING_MARK = \"$\";\nexport const STRING_NEW_LINE = \"\\n\";\nexport const STRING_OBJECT = \"object\";\nexport const STRING_REPLACEMENT = \"$1 \";\nexport const STRING_STRING = \"string\";\nexport const MSG_INVALID_INPUT = \"Argument must be an Array or Object\";\nexport const MSG_INDEX = `<IDX_${STRING_MARK}>`;\n","import {MSG_INVALID_INPUT, STRING_STRING} from \"./constants\";\n\n/**\n * Converts a JSONL string to an Array of Objects\n * @param arg\n * @returns {any}\n */\nexport function parse (arg) {\n    if (typeof arg !== STRING_STRING) {\n        throw new TypeError(MSG_INVALID_INPUT);\n    }\n\n    const result = JSON.parse(`[${arg.trim().split(/(?<=})\\n/).join(\",\")}]`);\n\n    return result.length > 1 ? result : result[0];\n}\n","/**\n * Rewrite a string to be used in swaps\n * @param arg\n * @returns {string}\n */\nexport function rewrite (arg) {\n\treturn `\"${arg.replace(/\"/g, \"\\\\\\\"\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\")}\"`;\n}","import {\n    MSG_INDEX,\n    MSG_INVALID_INPUT,\n    STRING_MARK,\n    STRING_NEW_LINE,\n    STRING_OBJECT,\n    STRING_REPLACEMENT\n} from \"./constants.js\";\nimport {rewrite} from \"./rewrite.js\";\nimport {strings} from \"tiny-strings\";\n\n/**\n * Converts an Object or Array of Objects to JSONL string\n * @param arg\n * @returns {string}\n */\nexport function stringify (arg) {\n    if (typeof arg !== STRING_OBJECT) {\n        throw new TypeError(MSG_INVALID_INPUT);\n    }\n\n    let result;\n\n    if (Array.isArray(arg)) {\n        result = arg.map(i => stringify(i)).join(STRING_NEW_LINE);\n    } else {\n        let tmp = JSON.stringify(arg, null, 0);\n        const extracted = strings(arg, true).map(rewrite);\n\n        for (const [idx, val] of extracted.entries()) {\n            tmp = tmp.replace(val, MSG_INDEX.replace(STRING_MARK, idx));\n        }\n\n        result = tmp.replace(/(:|,)/g, STRING_REPLACEMENT);\n\n        for (const [idx, val] of extracted.entries()) {\n            result = result.replace(MSG_INDEX.replace(STRING_MARK, idx.toString()), val);\n        }\n    }\n\n    return result;\n}"],"names":["MSG_INVALID_INPUT","MSG_INDEX","parse","arg","TypeError","result","JSON","trim","split","join","length","rewrite","replace","stringify","Array","isArray","map","i","tmp","extracted","strings","idx","val","entries","toString"],"mappings":";;;;uCAAO,MAKMA,EAAoB,sCACpBC,EAAY,UCClB,SAASC,EAAOC,GACnB,GDJyB,iBCIdA,EACP,MAAM,IAAIC,UAAUJ,GAGxB,MAAMK,EAASC,KAAKJ,MAAM,IAAIC,EAAII,OAAOC,MAAM,YAAYC,KAAK,SAEhE,OAAOJ,EAAOK,OAAS,EAAIL,EAASA,EAAO,EAC/C,CCVO,SAASM,EAASR,GACxB,MAAO,IAAIA,EAAIS,QAAQ,KAAM,OAAQA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,SACjG,CCSO,SAASC,EAAWV,GACvB,GHfyB,iBGedA,EACP,MAAM,IAAIC,UAAUJ,GAGxB,IAAIK,EAEJ,GAAIS,MAAMC,QAAQZ,GACdE,EAASF,EAAIa,KAAIC,GAAKJ,EAAUI,KAAIR,KHvBb,UGwBpB,CACH,IAAIS,EAAMZ,KAAKO,UAAUV,EAAK,KAAM,GACpC,MAAMgB,EAAYC,EAAQjB,GAAK,GAAMa,IAAIL,GAEzC,IAAK,MAAOU,EAAKC,KAAQH,EAAUI,UAC/BL,EAAMA,EAAIN,QAAQU,EAAKrB,EAAUW,QH9BlB,IG8BuCS,IAG1DhB,EAASa,EAAIN,QAAQ,SH9BK,OGgC1B,IAAK,MAAOS,EAAKC,KAAQH,EAAUI,UAC/BlB,EAASA,EAAOO,QAAQX,EAAUW,QHpCnB,IGoCwCS,EAAIG,YAAaF,EAE/E,CAED,OAAOjB,CACX,QAAAH,WAAAW"}